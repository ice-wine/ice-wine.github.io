(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{362:function(e,a,t){"use strict";t.r(a);var r=t(42),v=Object(r.a)({},(function(){var e=this,a=e.$createElement,t=e._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"基础"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#基础"}},[e._v("#")]),e._v(" 基础")]),e._v(" "),t("p",[e._v("刷完这70道力扣，你就可以走出新手村啦")]),e._v(" "),t("h2",{attrs:{id:"数组-array"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数组-array"}},[e._v("#")]),e._v(" 数组 Array")]),e._v(" "),t("p",[e._v("力扣 485 最大连续1的个数 | Max Consecutive One")]),e._v(" "),t("p",[e._v("力扣 283 移动零 | Move Zeroes")]),e._v(" "),t("p",[e._v("力扣 27\t移除元素 | Remove Element")]),e._v(" "),t("h2",{attrs:{id:"链表-linked-list"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#链表-linked-list"}},[e._v("#")]),e._v(" 链表 Linked List")]),e._v(" "),t("p",[e._v("力扣 203 移除链表元素 | Remove Linked List Elements")]),e._v(" "),t("p",[e._v("力扣 206 反转链表 | Reverse Linked List")]),e._v(" "),t("h2",{attrs:{id:"队列-queue"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#队列-queue"}},[e._v("#")]),e._v(" 队列 Queue")]),e._v(" "),t("p",[e._v("力扣 933 最近的请求次数 | Number of Recent Calls")]),e._v(" "),t("p",[e._v("力扣 225 用队列实现栈 | Implement Stack Using Queue")]),e._v(" "),t("p",[e._v("力扣 622 设计循环队列 | Design Circular Queue")]),e._v(" "),t("p",[e._v("力扣 641 设计循环双端队列 | Design Circular Deque")]),e._v(" "),t("h1",{attrs:{id:"栈-stack"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#栈-stack"}},[e._v("#")]),e._v(" 栈 Stack")]),e._v(" "),t("p",[e._v("力扣 20 有效的括号 | Valid Parentheses")]),e._v(" "),t("p",[e._v("力扣 496 下一个更大的元素 | Next Greater Element I")]),e._v(" "),t("p",[e._v("力扣 232 用栈实现队列 | Implement Queue Using Stack")]),e._v(" "),t("h2",{attrs:{id:"哈希表-hash-table"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#哈希表-hash-table"}},[e._v("#")]),e._v(" 哈希表 Hash Table")]),e._v(" "),t("p",[e._v("力扣 217 存在重复元素 | Contains Duplicate")]),e._v(" "),t("p",[e._v("力扣 389 找不同 | Find Difference")]),e._v(" "),t("p",[e._v("力扣 496 下一个更大的元素 | Next Greater Element I")]),e._v(" "),t("h2",{attrs:{id:"集合-set"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#集合-set"}},[e._v("#")]),e._v(" 集合 Set")]),e._v(" "),t("p",[e._v("力扣 217 存在重复元素 | Contains Duplicate")]),e._v(" "),t("p",[e._v("力扣 705 设计哈希集合 | Design HashSet")]),e._v(" "),t("h2",{attrs:{id:"堆-heap"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#堆-heap"}},[e._v("#")]),e._v(" 堆 Heap")]),e._v(" "),t("p",[e._v("力扣 215 数组中的第K个最大元素 | Kth Largest Element in an Array")]),e._v(" "),t("p",[e._v("力扣 692 前K个高频单词 | Top K Frequent Words")]),e._v(" "),t("h2",{attrs:{id:"双指针算法-two-pointer"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#双指针算法-two-pointer"}},[e._v("#")]),e._v(" 双指针算法 Two Pointer")]),e._v(" "),t("p",[e._v("力扣 141 环形链表 | Linked List Cycle")]),e._v(" "),t("p",[e._v("力扣 344 反转字符串 | Reverse String")]),e._v(" "),t("p",[e._v("力扣 881 救生艇 | Boats to Save People")]),e._v(" "),t("h2",{attrs:{id:"二分查找法-binary-search"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#二分查找法-binary-search"}},[e._v("#")]),e._v(" 二分查找法 Binary Search")]),e._v(" "),t("p",[e._v("力扣 704 二分查找 | Binary Search")]),e._v(" "),t("p",[e._v("力扣 35 搜索插入位置 | Search Insert Position")]),e._v(" "),t("p",[e._v("力扣 162 寻找峰值 | Find Peak Element")]),e._v(" "),t("p",[e._v("力扣 74 搜索二维矩阵 | Search a 2D Matrix")]),e._v(" "),t("h2",{attrs:{id:"滑动窗口-sliding-window"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#滑动窗口-sliding-window"}},[e._v("#")]),e._v(" 滑动窗口 Sliding Window")]),e._v(" "),t("p",[e._v("力扣 209 长度最小的子数组 | Minimum Size Subarray Sum")]),e._v(" "),t("p",[e._v("力扣 1456 定长子串中元音的最大数目 | Maximum Number of Vowels in a Substring of Given Length")]),e._v(" "),t("h2",{attrs:{id:"递归算法-recursion"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#递归算法-recursion"}},[e._v("#")]),e._v(" 递归算法 Recursion")]),e._v(" "),t("p",[e._v("力扣 509 斐波那契数 | Fibonacci Number")]),e._v(" "),t("p",[e._v("力扣 206 反转链表 | Reverse Linked List")]),e._v(" "),t("p",[e._v("力扣 344 反转字符串 | Reverse String")]),e._v(" "),t("p",[e._v("力扣 687 最长同值路径 | Longest Univalue Path")]),e._v(" "),t("h2",{attrs:{id:"分治算法-divide-and-conquer"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#分治算法-divide-and-conquer"}},[e._v("#")]),e._v(" 分治算法 Divide and Conquer")]),e._v(" "),t("p",[e._v("力扣 169 多数元素 | Majority Element")]),e._v(" "),t("p",[e._v("力扣 53 最大子序和 | Maximum Subarray")]),e._v(" "),t("h2",{attrs:{id:"回溯算法-backtracking"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#回溯算法-backtracking"}},[e._v("#")]),e._v(" 回溯算法 Backtracking")]),e._v(" "),t("p",[e._v("力扣 22 括号生成 | Generate Parentheses")]),e._v(" "),t("p",[e._v("力扣 78 子集 | Subsets")]),e._v(" "),t("p",[e._v("力扣 77 组合 | Combinations")]),e._v(" "),t("p",[e._v("力扣 46 全排列 | Permutations")]),e._v(" "),t("h2",{attrs:{id:"深度优先算法-dfs"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#深度优先算法-dfs"}},[e._v("#")]),e._v(" 深度优先算法 DFS")]),e._v(" "),t("p",[e._v("力扣 938 二叉搜索树的范围和 | Range Sum of BST")]),e._v(" "),t("p",[e._v("力扣 78 子集 | Subsets")]),e._v(" "),t("p",[e._v("力扣 200 岛屿数量 | Number of Islands")]),e._v(" "),t("h2",{attrs:{id:"宽度优先算法-bfs"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#宽度优先算法-bfs"}},[e._v("#")]),e._v(" 宽度优先算法 BFS")]),e._v(" "),t("p",[e._v("力扣 102 二叉树的层序遍历 | Binary Tree Level Order Traversal")]),e._v(" "),t("p",[e._v("力扣 107 二叉树的层序遍历 II | Binary Tree Level Order Traversal II")]),e._v(" "),t("p",[e._v("力扣 200 岛屿数量 | Number of Islands")]),e._v(" "),t("h2",{attrs:{id:"并查集-union-find"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#并查集-union-find"}},[e._v("#")]),e._v(" 并查集 Union Find")]),e._v(" "),t("p",[e._v("力扣 200 岛屿数量 | Number of Islands")]),e._v(" "),t("p",[e._v("力扣 547 省份数量 | Number of Provinces")]),e._v(" "),t("p",[e._v("力扣 721 账户合并 | Accounts Merge")]),e._v(" "),t("h2",{attrs:{id:"贪心算法-greedy"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#贪心算法-greedy"}},[e._v("#")]),e._v(" 贪心算法 Greedy")]),e._v(" "),t("p",[e._v("力扣 322 零钱兑换 | Coin Change")]),e._v(" "),t("p",[e._v("力扣 1217 玩筹码 | Minimum Cost to Move Chips to The Same Position")]),e._v(" "),t("p",[e._v("力扣 55 跳跃游戏 | Jump Game")]),e._v(" "),t("h2",{attrs:{id:"记忆化搜索-memoization"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#记忆化搜索-memoization"}},[e._v("#")]),e._v(" 记忆化搜索 Memoization")]),e._v(" "),t("p",[e._v("力扣 509 斐波那契数 | Fibonacci Number")]),e._v(" "),t("p",[e._v("力扣 322 零钱兑换 | Coin Change")]),e._v(" "),t("h2",{attrs:{id:"动态规划-dynamic-programming"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#动态规划-dynamic-programming"}},[e._v("#")]),e._v(" 动态规划 Dynamic Programming")]),e._v(" "),t("p",[e._v("力扣 509 斐波那契数 | Fibonacci Number")]),e._v(" "),t("p",[e._v("力扣 62 不同路径 | Unique Paths")]),e._v(" "),t("p",[e._v("力扣 121 买卖股票的最佳时机 | Best Time to Buy and Sell Stock")]),e._v(" "),t("p",[e._v("力扣 70 爬楼梯 | Climbing Stairs")]),e._v(" "),t("p",[e._v("力扣 279 完全平方数 | Perfect Squares")]),e._v(" "),t("p",[e._v("力扣 221 最大正方形 | Maximal Square")]),e._v(" "),t("h2",{attrs:{id:"trie-前缀树"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#trie-前缀树"}},[e._v("#")]),e._v(" Trie(前缀树)")]),e._v(" "),t("p",[e._v("力扣 208 实现Trie | Implement Trie")]),e._v(" "),t("p",[e._v("力扣 720 词典中最长的单词 | Longest Word in Dictionary")]),e._v(" "),t("p",[e._v("力扣 692 前K个高频单词 | Top K Frequent Words")]),e._v(" "),t("h2",{attrs:{id:"拓扑排序-topologic-sort"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#拓扑排序-topologic-sort"}},[e._v("#")]),e._v(" 拓扑排序 Topologic Sort")]),e._v(" "),t("p",[e._v("力扣 207 课程表 | Course Schedule")]),e._v(" "),t("p",[e._v("力扣 210 课程表 II | Course Schedule II")])])}),[],!1,null,null,null);a.default=v.exports}}]);